---
import "../styles/global.css";
const { title = 'The World (as Wiki)', description = 'An explorable world of notes', } = Astro.props;
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="icon" href="/favicon.svg" />
  </head>
  <body>
    <header class="site-header">
      <a class="brand" href="/">A Paracosm: the World</a>
      <nav class="primary-nav">
        <a href="/atlas/">Atlas</a>
        <a href="/timeline/">Timeline</a>
        <a href="/codex/">Codex</a>
        <a href="/characters/">Characters</a>
        <a href="/graph">Graph</a>
      </nav>
      <div style="display:flex; gap:8px; align-items:center">
        <button id="palette-trigger" class="ghost-btn" title="Search (Ctrl/‚åò+K)">üîé</button>
        <button id="simplify-toggle" class="ghost-btn" aria-pressed="false" title="Toggle Simplified View">‚óê</button>
      </div>
    </header>
    <main class="site-main">
      <slot />
    </main>
    <footer class="site-footer">
      <div>¬© {new Date().getFullYear()} A Paracosm: the World</div>
      <div class="footer-links">
        <div>
          <strong>Explore</strong>
          <div class="footer-nav">
            <a href="/atlas/">Atlas</a>
            <a href="/timeline/">Timeline</a>
            <a href="/codex/">Codex</a>
            <a href="/characters/">Characters</a>
            <a href="/graph">Graph</a>
          </div>
        </div>
        <div>
          <strong>Power User Tools</strong>
          <div class="footer-nav">
            <a href="/tags/">Tags</a>
          </div>
        </div>
        <div>
          <a href="https://github.com/stephen-netu/stephen-netu.github.io">GitHub</a>
        </div>
      </div>
    </footer>
    <!-- Global Search Palette -->
    <div id="palette" style="display:none; position:fixed; inset:0; z-index:1000;">
      <div id="palette-backdrop" style="position:absolute; inset:0; background:rgba(0,0,0,0.5)"></div>
      <div style="position:absolute; left:50%; top:15%; transform:translateX(-50%); width:min(720px,92vw); background:#0e1220; border:1px solid #222733; border-radius:10px; box-shadow:0 10px 30px rgba(0,0,0,0.5); overflow:hidden">
        <div style="padding:10px; border-bottom:1px solid #222733; display:flex; gap:8px; align-items:center">
          <span style="opacity:0.7">‚åò/Ctrl K</span>
          <input id="palette-input" class="input" placeholder="Search notes and tags‚Ä¶" style="flex:1; background:#0a0d17; border:1px solid #1a2030" />
        </div>
        <div id="palette-results" style="max-height:min(60vh,600px); overflow:auto">
          <div style="padding:12px; opacity:0.7">Type to search‚Ä¶</div>
        </div>
      </div>
    </div>

    <!-- SW Update Banner -->
    <div id="sw-update-banner" role="alert" aria-live="assertive" style="display:none; position:fixed; left:50%; transform:translateX(-50%); bottom:16px; background:#0e1220; color:#cbd5e1; border:1px solid #222733; border-radius:10px; padding:10px 12px; z-index:1200; box-shadow:0 10px 30px rgba(0,0,0,0.5);">
      <span id="sw-update-text" style="margin-right:10px">A new version is available.</span>
      <button id="sw-update-apply" class="ghost-btn" aria-label="Apply update and reload" style="margin-right:6px">Update</button>
      <button id="sw-update-dismiss" class="ghost-btn" aria-label="Dismiss update notification">Dismiss</button>
    </div>

    <script>
      (function() {
        // --- Feature Flags ---
        const flags = (() => {
          const search = new URLSearchParams(location.search);
          const setFlagIfQuery = (name) => {
            if (search.has(name)) {
              try { localStorage.setItem(name, '1'); } catch {}
            }
            return (localStorage.getItem(name) === '1');
          };
          return {
            noSW: setFlagIfQuery('no-sw'),
            noWidgets: setFlagIfQuery('no-widgets'),
            noSearch: setFlagIfQuery('no-search'),
          };
        })();

        const key = 'simplified-view';
        const apply = (on) => {
          try {
            if (on) document.body.dataset.simplified = 'on';
            else delete document.body.dataset.simplified;
          } catch {}
        };
        const saved = localStorage.getItem(key) === '1';
        apply(saved);
        const btn = document.getElementById('simplify-toggle');
        if (btn) {
          btn.setAttribute('aria-pressed', saved ? 'true' : 'false');
          btn.addEventListener('click', () => {
            const next = !(localStorage.getItem(key) === '1');
            localStorage.setItem(key, next ? '1' : '0');
            btn.setAttribute('aria-pressed', next ? 'true' : 'false');
            apply(next);
          });
        }

        // --- Perf helpers ---
        function lsReadJson(key, fallback){
          try { const v = localStorage.getItem(key); return v ? JSON.parse(v) : fallback; } catch { return fallback; }
        }
        function lsWriteJson(key, val){ try { localStorage.setItem(key, JSON.stringify(val)); } catch {} }
        function recordSample(key, ms, cap = 50){
          const arr = lsReadJson(key, []);
          arr.push(Math.max(0, Math.round(ms)));
          while (arr.length > cap) arr.shift();
          lsWriteJson(key, arr);
        }
        function percentile(arr, p){
          if (!arr || arr.length === 0) return 0;
          const a = [...arr].sort((x,y)=>x-y);
          const idx = Math.min(a.length-1, Math.max(0, Math.floor((p/100) * a.length)));
          return a[idx];
        }

        // --- Global Search Palette (Ctrl/Cmd + K) ---
        if (!flags.noSearch) {
          const palette = document.getElementById('palette');
          const input = document.getElementById('palette-input');
          const results = document.getElementById('palette-results');
          const backdrop = document.getElementById('palette-backdrop');
          let data = null; // array of { slug, title, tags, excerpt }
          let mini = null; // MiniSearch module
          let index = null; // MiniSearch instance
          let hotOpen = false;
          let indexReady = false;

          function openPalette() {
            if (!palette) return;
            try { performance.mark('palette:open'); } catch {}
            palette.style.display = 'block';
            setTimeout(() => input && input.focus(), 0);
            if (!hotOpen) { hotOpen = true; void ensureIndex(); }
          }
          function closePalette() {
            if (!palette) return;
            palette.style.display = 'none';
          }
          function render(list) {
            if (!results) return;
            if (!list || list.length === 0) {
              results.innerHTML = '<div style="padding:12px; opacity:0.7">No results</div>';
              return;
            }
            results.innerHTML = list.slice(0, 50).map((n, i) => `
              <a data-idx="${i}" href="/notes/${n.slug}/" class="result" style="display:block; padding:10px 12px; border-bottom:1px solid #161b28; text-decoration:none; color:inherit">
                <div style="font-weight:600">${escapeHtml(n.title||n.slug)}</div>
                <div style="opacity:0.75; font-size:0.9rem">${(n.tags||[]).map(t=>`<span class=tag>${escapeHtml(t)}</span>`).join(' ')}${n.excerpt?` ‚Äî ${escapeHtml(n.excerpt)}`:''}</div>
              </a>`).join('');
            selIndex = 0; highlight();
          }
          function escapeHtml(s){
            return String(s||'').replace(/[&<>"']/g, c=>({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;"}[c]));
          }
          let selIndex = 0;
          function highlight(){
            const nodes = results?.querySelectorAll('.result');
            nodes?.forEach((n,i)=>{
              n.style.background = i===selIndex ? '#12182a' : '';
            });
            const cur = nodes && nodes[selIndex];
            cur && cur.scrollIntoView({ block:'nearest' });
          }
          async function ensureIndex(){
            if (index) return index;
            if (!data) {
              const resp = await fetch('/content-index.json');
              const json = await resp.json();
              // shrink to minimal fields for palette
              data = json.map((n)=>({ slug:n.slug, title:n.title, tags:n.tags||[], excerpt:n.excerpt||'' }));
            }
            if (!mini) {
              try {
                mini = await import(/* @vite-ignore */ 'https://cdn.jsdelivr.net/npm/minisearch@6.3.0/dist/esm/index.min.js');
              } catch {
                mini = await import(/* @vite-ignore */ 'https://cdn.jsdelivr.net/npm/minisearch@6.3.0/dist/esm/index.js');
              }
            }
            const MiniSearch = mini?.default || mini?.MiniSearch || mini;
            index = new MiniSearch({
              fields: ['title','tags','excerpt'],
              storeFields: ['slug','title','tags','excerpt'],
              searchOptions: { prefix: true, fuzzy: 0.2, boost: { title: 3, tags: 2, excerpt: 1 } }
            });
            index.addAll(data.map((d)=>({ id:d.slug, ...d })));
            // record palette cold-open time (first index ready after open)
            if (!indexReady) {
              indexReady = true;
              try {
                const t0 = performance.getEntriesByName('palette:open').pop()?.startTime || performance.now();
                const dt = Math.max(0, performance.now() - t0);
                recordSample('palette.open.ms', dt);
              } catch {}
            }
            return index;
          }
          async function doSearch(q){
            if (!q) { render([]); return; }
            const idx = await ensureIndex();
            const s0 = (performance && performance.now) ? performance.now() : Date.now();
            const res = idx.search(q).map(r=>({ slug:r.id, title:r.title, tags:r.tags, excerpt:r.excerpt }));
            const s1 = (performance && performance.now) ? performance.now() : Date.now();
            const ms = Math.max(0, s1 - s0);
            // update search samples and p95
            try {
              recordSample('search.ms', ms, 100);
              const samples = lsReadJson('search.ms', []);
              const p95 = percentile(samples, 95);
              try {
                localStorage.setItem('search.p95.ms', String(p95));
                // keep a tiny rolling history for manual trend checks
                const hist = lsReadJson('search.p95.hist', []);
                hist.push({ ts: Date.now(), p95 });
                while (hist.length > 60) hist.shift();
                localStorage.setItem('search.p95.hist', JSON.stringify(hist));
              } catch {}
            } catch {}
            render(res);
          }
          let keydownHandler = (e) => {
            const isMac = navigator.platform.toUpperCase().includes('MAC');
            const mod = isMac ? e.metaKey : e.ctrlKey;
            if (mod && (e.key === 'k' || e.key === 'K')) {
              e.preventDefault(); openPalette(); return;
            }
            if (palette && palette.style.display === 'block') {
              if (e.key === 'Escape') { e.preventDefault(); closePalette(); return; }
              if (e.key === 'ArrowDown') { e.preventDefault(); selIndex = Math.min(selIndex+1, (results?.querySelectorAll('.result')?.length||1)-1); highlight(); return; }
              if (e.key === 'ArrowUp') { e.preventDefault(); selIndex = Math.max(selIndex-1, 0); highlight(); return; }
              if (e.key === 'Enter') {
                const sel = results?.querySelectorAll('.result')?.[selIndex];
                if (sel) { sel.click(); }
              }
            }
          };
          document.addEventListener('keydown', keydownHandler, { passive:false });
          input?.addEventListener('input', ()=> doSearch(input.value.trim()));
          backdrop?.addEventListener('click', closePalette);
          // Header trigger button
          const headerBtn = document.getElementById('palette-trigger');
          headerBtn?.addEventListener('click', (e)=>{ e.preventDefault(); openPalette(); });
        }
      })();
 

          // --- Service Worker registration & update banner ---
          (function(){
            if (!('serviceWorker' in navigator)) return;
            const flagsNoSW = (localStorage.getItem('no-sw') === '1');
            if (flagsNoSW) return;
            const banner = document.getElementById('sw-update-banner');
            const btnApply = document.getElementById('sw-update-apply');
            const btnDismiss = document.getElementById('sw-update-dismiss');
            function showBanner(){
              if (!banner) return;
              banner.style.display = 'block';
              // Move focus to the primary action for a11y
              setTimeout(()=>{ try { btnApply?.focus(); } catch {} }, 0);
            }
            function hideBanner(){ if (banner) banner.style.display = 'none'; }
            function wireBanner(reg){
              btnApply?.addEventListener('click', ()=>{
                try { reg.waiting?.postMessage({ type:'sw:skipWaiting' }); } catch {}
                hideBanner();
              });
              btnDismiss?.addEventListener('click', ()=> hideBanner());
            }
            function maybePrompt(reg){
              if (reg.waiting) { showBanner(); wireBanner(reg); }
            }
            window.addEventListener('load', ()=>{
              navigator.serviceWorker.register('/sw.js').then((reg)=>{
                maybePrompt(reg);
                reg.addEventListener('updatefound', ()=>{
                  const nw = reg.installing;
                  nw?.addEventListener('statechange', ()=>{
                    if (nw.state === 'installed' && navigator.serviceWorker.controller) {
                      showBanner(); wireBanner(reg);
                    }
                  });
                });
                // Reload once the new SW takes control
                let refreshing = false;
                navigator.serviceWorker.addEventListener('controllerchange', ()=>{
                  if (refreshing) return; refreshing = true; location.reload();
                });
                // Optional logging of SW messages and Esc to dismiss
                navigator.serviceWorker.addEventListener('message', (e)=>{
                  if (e?.data?.type === 'sw:activated') {
                    // no-op; controllerchange will handle reload
                  }
                });
                window.addEventListener('keydown', (e)=>{
                  if (e.key === 'Escape' && banner && banner.style.display === 'block') hideBanner();
                }, { passive: true });
              }).catch(()=>{});
            });
          })();
        </script>
        <style>
          /* Palette minimal styles */
          #palette .tag { display:inline-block; padding:1px 6px; border:1px solid #1f2636; border-radius:12px; margin-right:6px; }
          @media (prefers-reduced-motion: reduce) {
            #palette * { scroll-behavior: auto; }
          }
        </style>
      </body>
    </html>
