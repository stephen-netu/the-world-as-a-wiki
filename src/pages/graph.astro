---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection } from 'astro:content';
const focus = Astro.url.searchParams.get('focus') || '';
const notes = (await getCollection('notes')).filter(n => !n.data.draft);
const nodes = notes.map(n => ({ id: n.slug, title: n.data.title, tags: n.data.tags||[] }));
const linkPairs = [] as {source:string,target:string}[];
for (const n of notes) {
  for (const t of (n.data.links||[])) {
    if (t) linkPairs.push({ source: n.slug, target: t });
  }
}
---
<BaseLayout title="Graph â€” The World (as Wiki)">
  <section class="card">
    <h1>Graph</h1>
    <p>Drag nodes; click to open notes. Focus: {focus || 'none'}</p>
    <div id="graph" style="height: 70vh; width: 100%; background:#0e1220; border:1px solid #222733; border-radius:10px;"></div>
  </section>
  <script type="application/json" id="graph-data">{JSON.stringify({nodes, links: linkPairs, focus})}</script>
  <script src="https://cdn.jsdelivr.net/npm/d3@7/dist/d3.min.js"></script>
  <script>
  (function(){
    const data = JSON.parse(document.getElementById('graph-data').textContent);
    const el = document.getElementById('graph');
    const width = el.clientWidth, height = el.clientHeight;
    const svgNS = 'http://www.w3.org/2000/svg';
    const svg = document.createElementNS(svgNS, 'svg');
    svg.setAttribute('width', width);
    svg.setAttribute('height', height);
    el.innerHTML = '';
    el.appendChild(svg);

    const link = d3.linkHorizontal();
    const sim = d3.forceSimulation(data.nodes)
      .force('link', d3.forceLink(data.links).id(d=>d.id).distance(90).strength(0.3))
      .force('charge', d3.forceManyBody().strength(-140))
      .force('center', d3.forceCenter(width/2, height/2));

    const gLinks = d3.select(svg).append('g').attr('stroke', '#334');
    const gNodes = d3.select(svg).append('g');

    const links = gLinks.selectAll('line').data(data.links).enter().append('line').attr('stroke', '#334');
    const nodes = gNodes.selectAll('circle').data(data.nodes).enter().append('circle')
      .attr('r', d => d.id === data.focus ? 9 : 6)
      .attr('fill', d => d.id === data.focus ? '#f59e0b' : '#3b82f6')
      .call(d3.drag()
        .on('start', (event, d) => { if (!event.active) sim.alphaTarget(0.3).restart(); d.fx = d.x; d.fy = d.y; })
        .on('drag', (event, d) => { d.fx = event.x; d.fy = event.y; })
        .on('end',  (event, d) => { if (!event.active) sim.alphaTarget(0); d.fx = null; d.fy = null; })
      )
      .on('click', (_, d) => { window.location.href = '/notes/' + d.id + '/'; });

    const labels = gNodes.selectAll('text').data(data.nodes).enter().append('text')
      .text(d=>d.title).attr('fill', '#cbd5e1').attr('font-size', '10px');

    sim.on('tick', () => {
      links.attr('x1', d=>d.source.x).attr('y1', d=>d.source.y).attr('x2', d=>d.target.x).attr('y2', d=>d.target.y);
      nodes.attr('cx', d=>d.x).attr('cy', d=>d.y);
      labels.attr('x', d=>d.x + 10).attr('y', d=>d.y + 3);
    });
  })();
  </script>
</BaseLayout>
